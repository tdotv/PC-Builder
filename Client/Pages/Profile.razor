@page "/profile"
@using PC_Designer.ViewModels
@using PC_Designer.Shared
@using Radzen.Blazor
@using System.Security.Claims
@inject IConfiguration config
@inject IProfileViewModel _profileViewModel
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

@if (_profileViewModel == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-3 " >
        <div class="col-md-8 ">
            <div class="row justify-content-ceter align-items-center">
                <div class="col-md-4 text-center" >
                    @if(_profileViewModel.ProfilePictureData != null)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(_profileViewModel.ProfilePictureData)" alt="Profile picture" 
                            style="max-width: 150px; max-height: 150px; border-radius: 35%; margin-left: 50px;" class="mx-3"/>
                    }
                    else
                    {
                        <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            style="max-width: 150px; max-height: 150px; border-radius: 35%; margin-left: 50px;" class="mx-3" />
                    }
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h4 class="card-title">@($"{_profileViewModel.FirstName} {_profileViewModel.LastName}")</h4>
                        <p class="card-text"><strong>Email:</strong> @_profileViewModel.EmailAddress</p>
                        <button class="btn btn-link" @onclick="ToggleEditMode">Edit Profile</button>
                    </div>
                </div>
            </div>
            @if (_profileViewModel.IsEditing)
            {
                <div class="card mt-3">
                    <div class="card-body">
                        <h5 class="card-title">Edit Profile</h5>
                        <EditForm Model="_profileViewModel" OnInvalidSubmit="_profileViewModel.UpdateProfile">
                            <ValidationSummary />

                            <div class="col-4">
                                <InputFile OnChange="@OnInputFileChanged" multiple accept=".png,.jpg,.jpeg" />
                            </div>

                            <div class="form-group>">
                                <label for="FirstName">First Name:</label>
                                <InputText id="FirstName" @bind-Value="_profileViewModel.FirstName" class="form-control" />
                            </div>

                            <div class="form-group>">
                                <label for="FirstName">Last Name:</label>
                                <InputText id="LastName" @bind-Value="_profileViewModel.LastName" class="form-control" />
                            </div>

                            <div class="form-group>">
                                <label for="EmailAddress">Email:</label>
                                <InputText id="EmailAddress" @bind-Value="_profileViewModel.EmailAddress" class="form-control" />
                            </div>

                            <div class="form-group>">
                                <label for="AboutMe">About Me:</label>
                                <InputText id="AboutMe" @bind-Value="_profileViewModel.AboutMe" class="form-control" />
                            </div>
                        
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <!-- ... -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Additional Information</h5>
                    @_profileViewModel.AboutMe
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Settings</h6>

                    <div class="row" style="margin-bottom: 10px;">
                        <div>
                            <RadzenSwitch @bind-Value="@_profileViewModel.Notifications" Change="UpdateTheme" />
                            <span>&nbsp; &nbsp;</span>
                            <label style="margin-right: 15px;"> Notification </label>  

                            <RadzenSwitch @bind-Value="@_profileViewModel.DarkTheme" Change="UpdateNotifications" />
                            <span>&nbsp; &nbsp;</span>
                            <label> Dark Theme </label> 
                        </div>
                        
                    </div>
                    <div >
                        <button class="btn btn-primary" @onclick="UpdateTheme">Save</button>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;

        if(user.Identity is { IsAuthenticated: true })
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Convert.ToInt64(claim?.Value);
            try
            {
                await _profileViewModel.GetProfile();
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                _navigationManager.NavigateTo("/", true);
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }        
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //get byte array
        _profileViewModel.ProfilePictureData = buffer;  //  $"data:image/svg;base64,{Convert.ToBase64String(buffer)}"

        await _profileViewModel.UpdateProfile();
    }

    private async Task UpdateTheme()
    {
        var themeName = _profileViewModel.DarkTheme ? "dark" : "light";

        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./js/site.js");
        await module.InvokeVoidAsync("setTheme", themeName);
        
        await _profileViewModel.UpdateTheme();
    }

    private async Task UpdateNotifications()
    {
        await _profileViewModel.UpdateNotifications();
    }

    private void ToggleEditMode()
    {
        _profileViewModel.IsEditing = !_profileViewModel.IsEditing;
    }
}