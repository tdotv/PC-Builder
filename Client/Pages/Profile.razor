@page "/profile"
@using PC_Designer.ViewModels
@using PC_Designer.Shared
@using Radzen.Blazor
@using System.Security.Claims
@inject IConfiguration config
@inject IProfileViewModel _profileViewModel
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<PageTitle>Profile</PageTitle>

@if (_profileViewModel == null)
{
    <p>Loading...</p>
}
else
{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Profile</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    </head>
    <body>
        <div class="container">
            <div class="box">
                @if(_profileViewModel.ProfilePictureData != null)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(_profileViewModel.ProfilePictureData)" alt="Profile picture" 
                            style="max-width: 150px; max-height: 150px; border-radius: 35%; margin-left: 50px;" class="mx-3"/>
                    }
                    else
                    {
                        <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            style="max-width: 150px; max-height: 150px; border-radius: 35%; margin-left: 50px;" class="mx-3" />
                    }
                <ul>
                    <li>@($"{_profileViewModel.FirstName} {_profileViewModel.LastName}")</li>
                    <li>@_profileViewModel.EmailAddress</li>
                </ul>
            </div>
            <div class="About">
                <ul>
                    <h1>Profile</h1>
                </ul>
                <ul>
                    <h3>Settings</h3>
                    <li>
                        <div class="row" style="margin-bottom: 10px;">
                            <div>
                                <label> Notification </label>  
                                <RadzenSwitch @bind-Value="@_profileViewModel.Notifications" Change="UpdateNotifications" />
                                <span>&nbsp; &nbsp;</span>

                                <label style="margin-left: 15px"> Dark Theme </label> 
                                <RadzenSwitch @bind-Value="@_profileViewModel.DarkTheme" Change="UpdateTheme" />
                                <span>&nbsp; &nbsp;</span>
                            </div>
                        </div>
                    </li>
                </ul>
                <ul>
                    <h3>Edit Profile</h3>
                    <li>
                        <button class="btn btn-primary" @onclick="ToggleEditMode">Click me!</button>
                        @if (_profileViewModel.IsEditing)
                        {
                            <div class="card mt-3">
                                <div class="card-body">
                                    <EditForm Model="_profileViewModel" OnInvalidSubmit="_profileViewModel.UpdateProfile">
                                        <ValidationSummary />
                                        <div class="col-4">
                                            <InputFile OnChange="@OnInputFileChanged"/>
                                            <br>
                                        </div>
                                        <div class="form-group>">
                                            <label for="LastName">First Name:</label>
                                            <InputText id="FirstName" @bind-Value="_profileViewModel.FirstName" class="form-control" />
                                        </div>
                                        <div class="form-group>">
                                            <label for="LastName">Last Name:</label>
                                            <InputText id="LastName" @bind-Value="_profileViewModel.LastName" class="form-control" />
                                        </div>
                                        <div class="form-group>">
                                            <label for="EmailAddress">Email:</label>
                                            <InputText id="EmailAddress" @bind-Value="_profileViewModel.EmailAddress" class="form-control" />
                                        </div>
                                        <div class="form-group>">
                                            <label for="AboutMe">About Me:</label>
                                            <InputText id="AboutMe" @bind-Value="_profileViewModel.AboutMe" class="form-control" />
                                        </div>
                                    
                                    </EditForm>
                                </div>
                            </div>
                        }
                    </li>
                </ul>
                <ul>
                    <h3>About Me</h3>
                    <p>@_profileViewModel.AboutMe</p>
                </ul>
            </div>
        </div>
    </body>
    </html>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool IsLoading { get; set; } = true;
    private bool IsUserAuthorized { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        var user = authState.User;

        if(user.Identity is { IsAuthenticated: true })
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Convert.ToInt64(claim?.Value);
            IsUserAuthorized = user.IsInRole("admin") || user.IsInRole("general");

            try
            {
                await _profileViewModel.GetProfile();
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                _navigationManager.NavigateTo("/", true);
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        } 
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //get byte array
        _profileViewModel.ProfilePictureData = buffer;  //  $"data:image/svg;base64,{Convert.ToBase64String(buffer)}"

        await _profileViewModel.UpdateProfileWithImage(buffer);
    }

    private async Task UpdateTheme()
    {
        var themeName = _profileViewModel.DarkTheme ? "dark" : "light";

        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./js/site.js");
        await module.InvokeVoidAsync("setTheme", themeName);
        
        await _profileViewModel.UpdateTheme();
    }

    private async Task UpdateNotifications()
    {
        await _profileViewModel.UpdateNotifications();
    }

    private async Task Save()
    {
        await _profileViewModel.Save();
    }

    private void ToggleEditMode()
    {
        _profileViewModel.IsEditing = !_profileViewModel.IsEditing;
    }
}