@inject ISocketService SocketService
@page "/fetchdata"
@inject HttpClient Http
@using PC_Designer.ViewModels

<PageTitle>Sockets</PageTitle>

<h1>Sockets</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (sockets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var socket in sockets)
            {
                <tr>
                    <td>@socket.SocketId</td>
                    <td>@socket.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSocket(socket)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteSocket(socket.SocketId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <h4>Create/Edit Socket</h4>
    <EditForm Model="currentSocket" OnValidSubmit="SaveSocket">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Name">Name:</label>
            <InputText id="Name" class="form-control" @bind-Value="currentSocket.Name" />
            <ValidationMessage For="() => currentSocket.Name" />
        </div>
        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
</div>

@code {

    @* [Inject] private ISocketService socketService { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine($"Injected service name: {SocketService?.GetType().Name}");
    } *@

    private List<SocketsViewModel> sockets = new List<SocketsViewModel>();
    private SocketsViewModel currentSocket = new SocketsViewModel();  // for Create or Edit

    protected override async Task OnInitializedAsync()
    {
        sockets = (await SocketService.GetSocketsAsync())?.Select
        (socket => (SocketsViewModel)socket).ToList() ?? new List<SocketsViewModel>();
    }

    private async Task SaveSocket()
    {
        if (currentSocket.SocketId == 0)
        {
            await SocketService.CreateSocketsAsync(currentSocket);
        }
        else
        {
            await SocketService.UpdateSocketsAsync(currentSocket);
        }
        
        var socketModels =  // Reload the list of Sockets
        sockets = (await SocketService.GetSocketsAsync())?.Select
        (socket => (SocketsViewModel)socket).ToList() ?? new List<SocketsViewModel>();
        currentSocket = new SocketsViewModel();  // Reset the currentSocket for the next Create or Edit
    }

    private void EditSocket(SocketsViewModel socket)
    {
        //  Set the currentSocket for editing
        currentSocket = socket;
    }

    private async Task DeleteSocket(int SocketId)
    {
        await SocketService.DeleteSocketsAsync(SocketId);
        sockets = (await SocketService.GetSocketsAsync())?.Select
        (socket => (SocketsViewModel)socket).ToList() ?? new List<SocketsViewModel>();
    }

}
