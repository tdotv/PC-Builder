@page "/"
@page "/{RegisterRedirect:bool}"
@using Microsoft.Extensions.Options
@using PC_Designer.ViewModels
@using PC_Designer.Shared.Services
@using PC_Designer.Shared
@using PC_Designer.Client.Handlers
@inject ILoginViewModel _loginViewModel
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject IToastService _toastService
@inject IAccessTokenService _accessTokenService
@inject AuthenticationStateProvider _authenticationStateProvider

<body>
    <div class="content">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <img src="https://preview.colorlib.com/theme/bootstrap/login-form-07/images/undraw_remotely_2j6y.svg" alt="Image" class="img-fluid">
                </div>
                <div class="col-md-6 contents">
                    <div class="row justify-content-center">
                        <div class="col-md-8">
                            <div class="mb-4">
                                <h3>Sign In</h3>
                                <p class="mb-4">Please sign in to show us your best PC builds!</p>
                            </div>
                            <form action="#" method="post">
                                <div class="form-group first">
                                    <label>Email Address</label>
                                    <input type="text" @bind="_loginViewModel.EmailAddress" class="form-control">
                                </div>
                                <div class="form-group last mb-4">
                                    <label>Password</label>
                                    <input type="password" @bind="_loginViewModel.Password" class="form-control">
                                </div>
                                <div class="d-flex mb-5 align-items-center">
                                    <label class="control control--checkbox mb-0">
                                        <span class="caption">Remember Me</span>
                                        <input @bind-value="@_loginViewModel.RememberMe" style="margin-right: 15px;" type="checkbox" checked="checked">
                                        <div class="control__indicator"></div>
                                    </label>
                                    <span class="ml-auto"><a href="#" class="forgot-pass">Forgot Password</a></span>
                                </div>
                                <button class="btn btn-primary" @onclick="AuthenticateJWT">Login</button>
                                <button class="btn btn-primary" href="/createaccount">Create Account</button>
                                <span class="d-block text-left my-4 text-muted">&mdash; or login with &mdash;</span>
                                @* <div class="social-login">
                                    <a href="#" class="facebook">
                                        <span class="icon-vk mr-3"></span>
                                    </a>
                                </div> *@
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

  @* @code {
   [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/profile",true);
        }
    }

    public async Task AuthenticateJWT()
    {
        AuthenticationResponse authenticationResponse = await _loginViewModel.AuthenticateJWT();
        if(authenticationResponse.Token != string.Empty)
        {
            await _localStorageService.SetItemAsync("jwt_token",authenticationResponse.Token);
            _navigationManager.NavigateTo("/profile",true);
        }
        else
        {
            _toastService.ShowError("Invalid username or password");
        }
    } 
}*@

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    [Parameter]
    public bool RegisterRedirect { get; set; }

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Initializing the login details for John Smith
        if(!RegisterRedirect)
        {
            _loginViewModel.EmailAddress = "test_jwt";
            _loginViewModel.Password = "jwt";
        }

        var authState = await AuthenticationState;

        if (authState.User.Identity is { IsAuthenticated: true })
        {
            _navigationManager.NavigateTo("/profile");
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await AuthenticateJWT();
    }

    private async Task AuthenticateJWT()
    {
        IsLoading = true;
        AuthenticationResponse authenticationResponse = await _loginViewModel.AuthenticateJWT();
        if (authenticationResponse.Token != string.Empty)
        {
            await _accessTokenService.SetAccessTokenAsync("jwt_token", authenticationResponse.Token);
            await ((CustomAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated();
            
            _navigationManager.NavigateTo("/profile", true);
        }
        else
        {
            _toastService.ShowError("Invalid username or password");
        }
        IsLoading = false;
    }
}
